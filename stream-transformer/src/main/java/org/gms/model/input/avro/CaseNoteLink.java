/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.gms.model.input.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CaseNoteLink extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2148862202391803437L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CaseNoteLink\",\"namespace\":\"org.gms.model.input.avro\",\"fields\":[{\"name\":\"CL_CaseID\",\"type\":\"int\"},{\"name\":\"NT_NoteID\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CaseNoteLink> ENCODER =
      new BinaryMessageEncoder<CaseNoteLink>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CaseNoteLink> DECODER =
      new BinaryMessageDecoder<CaseNoteLink>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CaseNoteLink> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CaseNoteLink> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CaseNoteLink>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CaseNoteLink to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CaseNoteLink from a ByteBuffer. */
  public static CaseNoteLink fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int CL_CaseID;
  @Deprecated public int NT_NoteID;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CaseNoteLink() {}

  /**
   * All-args constructor.
   * @param CL_CaseID The new value for CL_CaseID
   * @param NT_NoteID The new value for NT_NoteID
   */
  public CaseNoteLink(java.lang.Integer CL_CaseID, java.lang.Integer NT_NoteID) {
    this.CL_CaseID = CL_CaseID;
    this.NT_NoteID = NT_NoteID;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return CL_CaseID;
    case 1: return NT_NoteID;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: CL_CaseID = (java.lang.Integer)value$; break;
    case 1: NT_NoteID = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'CL_CaseID' field.
   * @return The value of the 'CL_CaseID' field.
   */
  public java.lang.Integer getCLCaseID() {
    return CL_CaseID;
  }

  /**
   * Sets the value of the 'CL_CaseID' field.
   * @param value the value to set.
   */
  public void setCLCaseID(java.lang.Integer value) {
    this.CL_CaseID = value;
  }

  /**
   * Gets the value of the 'NT_NoteID' field.
   * @return The value of the 'NT_NoteID' field.
   */
  public java.lang.Integer getNTNoteID() {
    return NT_NoteID;
  }

  /**
   * Sets the value of the 'NT_NoteID' field.
   * @param value the value to set.
   */
  public void setNTNoteID(java.lang.Integer value) {
    this.NT_NoteID = value;
  }

  /**
   * Creates a new CaseNoteLink RecordBuilder.
   * @return A new CaseNoteLink RecordBuilder
   */
  public static org.gms.model.input.avro.CaseNoteLink.Builder newBuilder() {
    return new org.gms.model.input.avro.CaseNoteLink.Builder();
  }

  /**
   * Creates a new CaseNoteLink RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CaseNoteLink RecordBuilder
   */
  public static org.gms.model.input.avro.CaseNoteLink.Builder newBuilder(org.gms.model.input.avro.CaseNoteLink.Builder other) {
    return new org.gms.model.input.avro.CaseNoteLink.Builder(other);
  }

  /**
   * Creates a new CaseNoteLink RecordBuilder by copying an existing CaseNoteLink instance.
   * @param other The existing instance to copy.
   * @return A new CaseNoteLink RecordBuilder
   */
  public static org.gms.model.input.avro.CaseNoteLink.Builder newBuilder(org.gms.model.input.avro.CaseNoteLink other) {
    return new org.gms.model.input.avro.CaseNoteLink.Builder(other);
  }

  /**
   * RecordBuilder for CaseNoteLink instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CaseNoteLink>
    implements org.apache.avro.data.RecordBuilder<CaseNoteLink> {

    private int CL_CaseID;
    private int NT_NoteID;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.gms.model.input.avro.CaseNoteLink.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.CL_CaseID)) {
        this.CL_CaseID = data().deepCopy(fields()[0].schema(), other.CL_CaseID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NT_NoteID)) {
        this.NT_NoteID = data().deepCopy(fields()[1].schema(), other.NT_NoteID);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CaseNoteLink instance
     * @param other The existing instance to copy.
     */
    private Builder(org.gms.model.input.avro.CaseNoteLink other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.CL_CaseID)) {
        this.CL_CaseID = data().deepCopy(fields()[0].schema(), other.CL_CaseID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.NT_NoteID)) {
        this.NT_NoteID = data().deepCopy(fields()[1].schema(), other.NT_NoteID);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'CL_CaseID' field.
      * @return The value.
      */
    public java.lang.Integer getCLCaseID() {
      return CL_CaseID;
    }

    /**
      * Sets the value of the 'CL_CaseID' field.
      * @param value The value of 'CL_CaseID'.
      * @return This builder.
      */
    public org.gms.model.input.avro.CaseNoteLink.Builder setCLCaseID(int value) {
      validate(fields()[0], value);
      this.CL_CaseID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'CL_CaseID' field has been set.
      * @return True if the 'CL_CaseID' field has been set, false otherwise.
      */
    public boolean hasCLCaseID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'CL_CaseID' field.
      * @return This builder.
      */
    public org.gms.model.input.avro.CaseNoteLink.Builder clearCLCaseID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'NT_NoteID' field.
      * @return The value.
      */
    public java.lang.Integer getNTNoteID() {
      return NT_NoteID;
    }

    /**
      * Sets the value of the 'NT_NoteID' field.
      * @param value The value of 'NT_NoteID'.
      * @return This builder.
      */
    public org.gms.model.input.avro.CaseNoteLink.Builder setNTNoteID(int value) {
      validate(fields()[1], value);
      this.NT_NoteID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'NT_NoteID' field has been set.
      * @return True if the 'NT_NoteID' field has been set, false otherwise.
      */
    public boolean hasNTNoteID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'NT_NoteID' field.
      * @return This builder.
      */
    public org.gms.model.input.avro.CaseNoteLink.Builder clearNTNoteID() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CaseNoteLink build() {
      try {
        CaseNoteLink record = new CaseNoteLink();
        record.CL_CaseID = fieldSetFlags()[0] ? this.CL_CaseID : (java.lang.Integer) defaultValue(fields()[0]);
        record.NT_NoteID = fieldSetFlags()[1] ? this.NT_NoteID : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CaseNoteLink>
    WRITER$ = (org.apache.avro.io.DatumWriter<CaseNoteLink>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CaseNoteLink>
    READER$ = (org.apache.avro.io.DatumReader<CaseNoteLink>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
